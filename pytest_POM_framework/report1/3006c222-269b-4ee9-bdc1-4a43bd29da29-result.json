{"name": "test_search_for_items", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=127.0.6533.122)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B5BE9642+30946]\n\t(No symbol) [0x00007FF6B5B9E3D9]\n\t(No symbol) [0x00007FF6B5A96FDA]\n\t(No symbol) [0x00007FF6B5A8F0B5]\n\t(No symbol) [0x00007FF6B5A801E9]\n\t(No symbol) [0x00007FF6B5A81D62]\n\t(No symbol) [0x00007FF6B5A804CE]\n\t(No symbol) [0x00007FF6B5A7FD41]\n\t(No symbol) [0x00007FF6B5A7FC80]\n\t(No symbol) [0x00007FF6B5A7DE84]\n\t(No symbol) [0x00007FF6B5A7E29C]\n\t(No symbol) [0x00007FF6B5A9A041]\n\t(No symbol) [0x00007FF6B5B2BA2E]\n\t(No symbol) [0x00007FF6B5B0CA6A]\n\t(No symbol) [0x00007FF6B5B2B041]\n\t(No symbol) [0x00007FF6B5B0C813]\n\t(No symbol) [0x00007FF6B5ADA6E5]\n\t(No symbol) [0x00007FF6B5ADB021]\n\tGetHandleVerifier [0x00007FF6B5D1F84D+1301229]\n\tGetHandleVerifier [0x00007FF6B5D2BDC7+1351783]\n\tGetHandleVerifier [0x00007FF6B5D22A13+1313971]\n\tGetHandleVerifier [0x00007FF6B5C1DD16+245686]\n\t(No symbol) [0x00007FF6B5BA759F]\n\t(No symbol) [0x00007FF6B5BA3814]\n\t(No symbol) [0x00007FF6B5BA39A2]\n\t(No symbol) [0x00007FF6B5B9A3FF]\n\tBaseThreadInitThunk [0x00007FF99CD355A0+16]\n\tRtlUserThreadStart [0x00007FF99DE4485B+43]", "trace": "@pytest.fixture()\n    def driver():\n        driver = WebDriver()\n        driver.maximize_window()\n>       driver.get(\"https://demowebshop.tricentis.com/\")\n\ndemowebshop\\Tests\\conftest.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E4E36A9AE0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...07FF6B5B9A3FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FF99CD355A0+16]\\\\n\\\\tRtlUserThreadStart [0x00007FF99DE4485B+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=127.0.6533.122)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B5BE9642+30946]\nE       \t(No symbol) [0x00007FF6B5B9E3D9]\nE       \t(No symbol) [0x00007FF6B5A96FDA]\nE       \t(No symbol) [0x00007FF6B5A8F0B5]\nE       \t(No symbol) [0x00007FF6B5A801E9]\nE       \t(No symbol) [0x00007FF6B5A81D62]\nE       \t(No symbol) [0x00007FF6B5A804CE]\nE       \t(No symbol) [0x00007FF6B5A7FD41]\nE       \t(No symbol) [0x00007FF6B5A7FC80]\nE       \t(No symbol) [0x00007FF6B5A7DE84]\nE       \t(No symbol) [0x00007FF6B5A7E29C]\nE       \t(No symbol) [0x00007FF6B5A9A041]\nE       \t(No symbol) [0x00007FF6B5B2BA2E]\nE       \t(No symbol) [0x00007FF6B5B0CA6A]\nE       \t(No symbol) [0x00007FF6B5B2B041]\nE       \t(No symbol) [0x00007FF6B5B0C813]\nE       \t(No symbol) [0x00007FF6B5ADA6E5]\nE       \t(No symbol) [0x00007FF6B5ADB021]\nE       \tGetHandleVerifier [0x00007FF6B5D1F84D+1301229]\nE       \tGetHandleVerifier [0x00007FF6B5D2BDC7+1351783]\nE       \tGetHandleVerifier [0x00007FF6B5D22A13+1313971]\nE       \tGetHandleVerifier [0x00007FF6B5C1DD16+245686]\nE       \t(No symbol) [0x00007FF6B5BA759F]\nE       \t(No symbol) [0x00007FF6B5BA3814]\nE       \t(No symbol) [0x00007FF6B5BA39A2]\nE       \t(No symbol) [0x00007FF6B5B9A3FF]\nE       \tBaseThreadInitThunk [0x00007FF99CD355A0+16]\nE       \tRtlUserThreadStart [0x00007FF99DE4485B+43]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1724842490613, "stop": 1724842490613, "uuid": "836b9a32-380e-4d8a-8732-7e9b5e89e7a6", "historyId": "f3074c30bfc625eb0fc84f9665d3d558", "testCaseId": "f3074c30bfc625eb0fc84f9665d3d558", "fullName": "demowebshop.Tests.test_searchfield#test_search_for_items", "labels": [{"name": "parentSuite", "value": "demowebshop.Tests"}, {"name": "suite", "value": "test_searchfield"}, {"name": "host", "value": "bhu1_mc"}, {"name": "thread", "value": "10904-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "demowebshop.Tests.test_searchfield"}]}